[{"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\App.tsx":"1","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\index.tsx":"2","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\InstrumentPanel.tsx":"3","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeesList.tsx":"4","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\redux\\reducers\\employeeReducer.ts":"5","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\dal\\main.tsx":"6","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\redux\\store.ts":"7","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeRow.tsx":"8","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\EmployeeFormPresentation.tsx":"9","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\CreateNewEmployee.tsx":"10","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\UpdateEmployee.tsx":"11"},{"size":1134,"mtime":1606982445869,"results":"12","hashOfConfig":"13"},{"size":301,"mtime":1606898833977,"results":"14","hashOfConfig":"13"},{"size":1268,"mtime":1606982168862,"results":"15","hashOfConfig":"13"},{"size":1767,"mtime":1606981244992,"results":"16","hashOfConfig":"13"},{"size":2940,"mtime":1606985336655,"results":"17","hashOfConfig":"13"},{"size":1320,"mtime":1606983545390,"results":"18","hashOfConfig":"13"},{"size":453,"mtime":1606981753446,"results":"19","hashOfConfig":"13"},{"size":1860,"mtime":1606984323620,"results":"20","hashOfConfig":"13"},{"size":4238,"mtime":1606984754872,"results":"21","hashOfConfig":"13"},{"size":1339,"mtime":1606984807549,"results":"22","hashOfConfig":"13"},{"size":1368,"mtime":1606985186698,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"7oma9e",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\App.tsx",["49"],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\index.tsx",[],["50","51"],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\InstrumentPanel.tsx",[],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeesList.tsx",[],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\redux\\reducers\\employeeReducer.ts",["52"],"import { IEmployeeAPI } from \"../../dal/main\";\r\nimport {IEmployee, IStateEmployee} from \"../../interfaces/entities\";\r\nimport {IAction, IEmployeeState} from \"../../interfaces/states\";\r\n\r\nconst CREATE_EMPLOYEE = \"employee/CREATE_EMPLOYEE\";\r\nconst SET_EMPLOYEES = \"employee/SET_EMPLOYEES\";\r\nconst DELETE_SELECTED_EMPLOYEE = \"employee/DELETE_SELECTED_EMPLOYEE\";\r\nconst SELECT_EMPLOYEE = \"employee/SELECT_EMPLOYEE\";\r\nconst UPDATE_EMPLOYEE = \"employee/UPDATE_EMPLOYEE\";\r\n\r\nconst initialState: IEmployeeState = {\r\n    employees: [],\r\n    selectedEmployeeId: null\r\n}\r\n\r\nexport default function (state: IEmployeeState = initialState, action: IAction): object {\r\n    switch (action.type) {\r\n        case CREATE_EMPLOYEE:\r\n            return { ...state, employees: [...state.employees, action.payload] }\r\n        case SET_EMPLOYEES:\r\n            return { ...state, employees: [...action.payload], isChanged: false }\r\n        case SELECT_EMPLOYEE:\r\n            return { ...state, selectedEmployeeId: action.payload }\r\n        case DELETE_SELECTED_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                selectedEmployeeId: null,\r\n                employees: state.employees.filter((employee: IStateEmployee) => employee._id !== state.selectedEmployeeId)\r\n            }\r\n        case UPDATE_EMPLOYEE:\r\n            return {\r\n                ...state,\r\n                // @ts-ignore\r\n                employees: state.employees.map((employee: IEmployee) => {\r\n                    if (employee._id === action.payload._id) return action.payload\r\n                    return employee;\r\n                })\r\n            }\r\n        default:\r\n            return initialState\r\n    }\r\n}\r\n\r\nconst createEmployeeAC = (payload: IStateEmployee) => ({\r\n    type: CREATE_EMPLOYEE, payload\r\n})\r\n\r\nconst setEmployeesAC = (payload: IStateEmployee[]) => ({\r\n    type: SET_EMPLOYEES, payload\r\n})\r\n\r\nconst deleteSelectedEmployeeAC = (payload: number) => ({\r\n    type: DELETE_SELECTED_EMPLOYEE, payload\r\n})\r\n\r\nconst updateEmployeeAC = (payload: IEmployee) => ({\r\n    type: UPDATE_EMPLOYEE, payload\r\n})\r\n\r\nexport const deleteSelectedEmployee = (payload: number) => (dispatch: any) => {\r\n    IEmployeeAPI.deleteEmployee(payload);\r\n    dispatch(deleteSelectedEmployeeAC(payload))\r\n}\r\n\r\nexport const selectEmployeeAC = (payload: number) => ({\r\n    type: SELECT_EMPLOYEE, payload\r\n})\r\n\r\nexport const createEmployee = (data: IEmployee) => (dispatch: any) => {\r\n    const newEmployee: IStateEmployee = IEmployeeAPI.createEmployee(data);\r\n    dispatch(createEmployeeAC(newEmployee))\r\n    dispatch(selectEmployeeAC(newEmployee._id!))\r\n}\r\n\r\nexport const getEmployees = () => (dispatch: any) => {\r\n    const employees: IStateEmployee[] = IEmployeeAPI.getEmployees();\r\n    dispatch(setEmployeesAC(employees))\r\n}\r\n\r\nexport const updateEmployee = (data: IEmployee) => (dispatch: any) => {\r\n    IEmployeeAPI.updateEmployee(data);\r\n    dispatch(updateEmployeeAC(data));\r\n}\r\n\r\n","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\dal\\main.tsx",[],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\redux\\store.ts",["53"],"import {createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport employeeReducer from \"./reducers/employeeReducer\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        store?: object;\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({\r\n    employees: employeeReducer\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nwindow.store = store\r\n\r\nexport default store;","C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeRow.tsx",[],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\EmployeeFormPresentation.tsx",["54"],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\CreateNewEmployee.tsx",[],"C:\\Users\\danya\\OneDrive\\Рабочий стол\\Архивы сайтов и макетов\\emploees-app\\src\\components\\EmployeeForm\\UpdateEmployee.tsx",["55"],{"ruleId":"56","severity":1,"message":"57","line":12,"column":36,"nodeType":"58","endLine":12,"endColumn":38,"suggestions":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":16,"column":1,"nodeType":"66","endLine":42,"endColumn":2},{"ruleId":"67","severity":1,"message":"68","line":1,"column":56,"nodeType":"69","messageId":"70","endLine":1,"endColumn":63},{"ruleId":"67","severity":1,"message":"71","line":1,"column":16,"nodeType":"69","messageId":"70","endLine":1,"endColumn":24},{"ruleId":"67","severity":1,"message":"72","line":11,"column":12,"nodeType":"69","messageId":"70","endLine":11,"endColumn":21},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEmployees'. Either include it or remove the dependency array. If 'getEmployees' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["73"],"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","@typescript-eslint/no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'isChanged' is assigned a value but never used.",{"desc":"76","fix":"77"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getEmployees]",{"range":"78","text":"79"},[540,542],"[getEmployees]"]